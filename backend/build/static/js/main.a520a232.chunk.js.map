{"version":3,"sources":["components/UI/InputComponent.js","components/UI/ButtonComponent.js","components/home/Home.js","services/serviceConstants.js","components/chatRoom/UseChat.js","components/chatRoom/ChatRoom.js","components/chatRoom/ChatRoomLobby.js","services/chatServiceClient.js","components/UI/ErrorModal.js","components/layout/Header.js","App.js","services/chatHelperFunctions.js","reportWebVitals.js","index.js"],"names":["InputComponent","props","type","placeholder","value","required","onChange","className","ButtonComponent","to","onClick","children","Home","history","useHistory","confirmUsername","push","roomName","username","handleUsernameChange","handleRoomNameChange","e","preventDefault","handleConfirmUsername","SERVER_URL","NEW_CHAT_MESSAGE_EVENT","ChatRoom","roomId","useState","newMessage","setNewMessage","messages","setMessages","socketRef","useRef","useEffect","current","socketIOClient","query","on","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body","UseChat","style","fontSize","map","i","connected","color","time","event","target","ChatRoomLobby","match","params","handleRoomNameChangeWithLink","helpers","getAll","axios","get","then","response","data","create","newObject","post","Backdrop","onConfirm","ModalOverLay","title","ErrorModal","Fragment","ReactDOM","createPortal","document","getElementById","Header","App","setUsername","setConfirmUsername","setRoomName","error","setError","onlyUniqueUsernames","usernames","setUsernames","getUsernames","setTimeout","chatServiceClient","chatters","catch","err","console","log","clearTimeout","UseChatters","p","find","findName","trim","length","personObject","res","person","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.a520a232.chunk.js","sourcesContent":["const InputComponent = (props) => {\r\n    return (\r\n        <input\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            value={props.value}\r\n            required\r\n            onChange={props.onChange}\r\n            className={props.className}\r\n        />\r\n    )\r\n}\r\n\r\nexport default InputComponent\r\n","const ButtonComponent = (props) => {\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            to={props.to}\r\n            onClick={props.onClick}\r\n            value={props.value}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonComponent\r\n","import { useHistory } from 'react-router-dom'\r\nimport InputComponent from '../UI/InputComponent'\r\nimport ButtonComponent from '../UI/ButtonComponent'\r\n\r\nimport './Home.css'\r\n\r\nconst Home = (props) => {\r\n    let history = useHistory()\r\n\r\n    const addNewChatter = (e) => {\r\n        e.preventDefault()\r\n\r\n        props.handleConfirmUsername()\r\n    }\r\n\r\n    if (props.confirmUsername) {\r\n        history.push(`/${props.roomName}`)\r\n    }\r\n\r\n    return (\r\n        <div className='home-container'>\r\n            <InputComponent\r\n                type='text'\r\n                value={props.username}\r\n                onChange={props.handleUsernameChange}\r\n                placeholder='Name'\r\n                className='text-input-field'\r\n            />\r\n            <InputComponent\r\n                type='text'\r\n                value={props.roomName}\r\n                onChange={props.handleRoomNameChange}\r\n                placeholder='Room'\r\n                className='text-input-field'\r\n            />\r\n            <ButtonComponent\r\n                to={`/${props.roomName}`}\r\n                className='enter-room-button'\r\n                onClick={addNewChatter}\r\n            >\r\n                Go\r\n            </ButtonComponent>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","export const SERVER_URL = 'http://localhost:3001'","import { useEffect, useRef, useState } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { SERVER_URL } from '../../services/serviceConstants'\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = 'newChatMessage'\r\n\r\nexport const UseChat = (roomId, username) => {\r\n    const [messages, setMessages] = useState([]) // Sent and received messages\r\n    const socketRef = useRef()\r\n\r\n    useEffect(() => {\r\n        // Creates a WebSocket connection\r\n        socketRef.current = socketIOClient(SERVER_URL, {\r\n            query: { roomId, username: username },\r\n        })\r\n\r\n        // Listens for incoming messages\r\n        socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\r\n            const incomingMessage = {\r\n                ...message,\r\n                ownedByCurrentUser: message.senderId === socketRef.current.id,\r\n            }\r\n            setMessages((messages) => [...messages, incomingMessage])\r\n        })\r\n\r\n        // Destroys the socket reference\r\n        // when the connection is closed\r\n        return () => {\r\n            socketRef.current.disconnect()\r\n        }\r\n    }, [roomId, username])\r\n\r\n    // Sends a message to the server that\r\n    // forwards it to all users in the same room\r\n    const sendMessage = (username, messageBody) => {\r\n        socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n            username: username,\r\n            body: messageBody,\r\n            senderId: socketRef.current.id,\r\n        })\r\n    }\r\n\r\n    return { messages, sendMessage }\r\n}\r\n","import { useState } from 'react'\r\nimport './ChatRoom.css'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\nimport { UseChat } from './UseChat'\r\nimport ButtonComponent from '../UI/ButtonComponent'\r\n\r\nconst ChatRoom = ({ roomId, username }) => {\r\n    const [newMessage, setNewMessage] = useState('') // Message to be sent\r\n\r\n    const { messages, sendMessage } = UseChat(roomId, username)\r\n\r\n    // Creates a websocket and manages messaging\r\n\r\n    const handleNewMessageChange = (event) => {\r\n        setNewMessage(event.target.value)\r\n    }\r\n\r\n    const handleSendMessage = () => {\r\n        sendMessage(username, newMessage)\r\n        setNewMessage('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='chat-room-container'>\r\n                <div className='chatroomHeader'>\r\n                    <h1 className='room-name'>Room: {roomId}</h1>\r\n                    <div className='chatIconDiv1'></div>\r\n\r\n                    <div className='chatLogoDiv'>\r\n                        <span>\r\n                            <ChatIcon style={{ fontSize: 40 }}></ChatIcon>\r\n                        </span>\r\n                        chatApp\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='messages-container'>\r\n                    <ol className='messages-list'>\r\n                        {messages.map((message, i) => (\r\n                            <li\r\n                                key={i}\r\n                                className={`message-item ${\r\n                                    message.ownedByCurrentUser\r\n                                        ? 'my-message'\r\n                                        : 'received-message'\r\n                                }`}\r\n                            >\r\n                                {message.disconnect ? (\r\n                                    <p className='leave-chatroom'>\r\n                                        <strong>{message.disconnect} </strong>\r\n                                        left the chat room\r\n                                    </p>\r\n                                ) : message.connected ? (\r\n                                    <p className='connect-chatroom'>\r\n                                        <strong>{message.connected} </strong>\r\n                                        connected to the chat room\r\n                                    </p>\r\n                                ) : (\r\n                                    <>\r\n                                        <strong\r\n                                            style={{\r\n                                                color: `${message.color}`,\r\n                                            }}\r\n                                        >\r\n                                            {message.username}:{' '}\r\n                                        </strong>\r\n                                        <p>{message.body}</p>\r\n                                    </>\r\n                                )}\r\n                                <p className='time-chatroom'>{message.time}</p>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n                <textarea\r\n                    value={newMessage}\r\n                    onChange={handleNewMessageChange}\r\n                    placeholder='Write message...'\r\n                    className='new-message-input-field'\r\n                />\r\n                <ButtonComponent\r\n                    onClick={handleSendMessage}\r\n                    className='send-message-button'\r\n                >\r\n                    Send\r\n                </ButtonComponent>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatRoom\r\n","import React, { useEffect } from 'react'\r\nimport InputComponent from '../UI/InputComponent'\r\nimport ButtonComponent from '../UI/ButtonComponent'\r\nimport ChatRoom from './ChatRoom'\r\nimport './ChatRoomLobby.css'\r\n\r\nconst ChatRoomLobby = (props) => {\r\n    const { roomId } = props.match.params\r\n    const {\r\n        confirmUsername,\r\n        handleConfirmUsername,\r\n        handleUsernameChange,\r\n        username,\r\n        handleRoomNameChangeWithLink,\r\n    } = props\r\n    \r\n\r\n    const handleUrlConfirmUsername = () => {\r\n        handleConfirmUsername()\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleRoomNameChangeWithLink(roomId)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {confirmUsername === false ? (\r\n                <div className='chat-lobby-container'>\r\n                    <p className='text-input-field'>\r\n                        Please enter your username before entering the room{' '}\r\n                        <strong>{roomId}</strong>\r\n                    </p>\r\n\r\n                    <InputComponent\r\n                        value={username}\r\n                        onChange={handleUsernameChange}\r\n                        placeholder='Name'\r\n                        className='text-input-field'\r\n                        type='text'\r\n                    />\r\n                    <ButtonComponent\r\n                        className='enter-room-button'\r\n                        onClick={handleUrlConfirmUsername}\r\n                    >\r\n                        Enter\r\n                    </ButtonComponent>\r\n                </div>\r\n            ) : (\r\n                <ChatRoom roomId={roomId} username={username} />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatRoomLobby\r\n","import axios from 'axios'\r\nimport {SERVER_URL} from '../services/serviceConstants'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(`${SERVER_URL}/api/users`)\r\n\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(`${SERVER_URL}/api/users`, newObject);\r\n    return request.then((response) => response.data);\r\n  };\r\n\r\nconst helpers = {getAll, create}\r\n\r\nexport default helpers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './ErrorModal.css'\r\nimport ButtonComponent from './ButtonComponent'\r\n\r\nconst Backdrop = (props) => {\r\n    return <div className='backdrop' onClick={props.onConfirm} />\r\n}\r\n\r\nconst ModalOverLay = (props) => {\r\n    return (\r\n        <div className='modal'>\r\n            <header className='header'>\r\n                <h2>{props.title}</h2>\r\n            </header>\r\n            <div className='content'>\r\n                <p>{props.message}</p>\r\n            </div>\r\n            <footer className='actions'>\r\n                <ButtonComponent\r\n                    className='error-button'\r\n                    onClick={props.onConfirm}\r\n                >\r\n                    Ok\r\n                </ButtonComponent>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ErrorModal = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            {ReactDOM.createPortal(\r\n                <Backdrop onConfirm={props.onConfirm} />,\r\n                document.getElementById('error-background-root')\r\n            )}\r\n            {ReactDOM.createPortal(\r\n                <ModalOverLay\r\n                    title={props.title}\r\n                    message={props.message}\r\n                    onConfirm={props.onConfirm}\r\n                />,\r\n                document.getElementById('error-message-root')\r\n            )}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ErrorModal\r\n","import React from 'react'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n            <div className='header'>\r\n                <div className='chatIconDiv'>\r\n                    <ChatIcon style={{ fontSize: 140 }}></ChatIcon>\r\n                </div>\r\n                <div className='chatAppDiv'>chatApp</div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","import { useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './index.css'\nimport Home from './components/home/Home'\nimport ChatRoomLobby from './components/chatRoom/ChatRoomLobby'\nimport { UseChatters } from './services/chatHelperFunctions'\nimport ErrorModal from './components/UI/ErrorModal'\nimport chatServiceClient from './services/chatServiceClient'\nimport Header from './components/layout/Header'\n\nfunction App() {\n    const [username, setUsername] = useState('')\n    const [confirmUsername, setConfirmUsername] = useState(false)\n    const [roomName, setRoomName] = useState('')\n    const [error, setError] = useState(null)\n\n    const handleRoomNameChange = (e) => {\n        setRoomName(e.target.value)\n    }\n\n    const handleRoomNameChangeWithLink = (e) => {\n        setRoomName(e)\n    }\n\n    const chatters = UseChatters(username)\n\n    const onlyUniqueUsernames = chatters\n        .map((p) => p.username)\n        .find((findName) => findName === username)\n\n    const handleUsernameChange = (e) => {\n        setUsername(e.target.value)\n    }\n\n    const handleConfirmUsername = (e) => {\n        if (username.trim().length < 1) {\n            setError({\n                title: 'Invalid input',\n                message: 'Username must be at least 1 characters long.',\n            })\n            return\n        } else if (onlyUniqueUsernames) {\n            setError({\n                title: 'Invalid input',\n                message: `Username '${username}' is already in use.`,\n            })\n            return\n        } else if (roomName.trim().length < 1) {\n            setError({\n                title: 'Invalid input',\n                message: 'Room name must be at least 1 character long',\n            })\n        } else {\n            const personObject = {\n                username: username,\n            }\n\n            chatServiceClient\n                .create(personObject)\n                .then((res) => {\n                    setUsername(res.person.username)\n                    setConfirmUsername(true)\n                })\n\n                .catch((err) => {\n                    console.log('error with get request', err)\n                    setError({\n                        title: 'Invalid input',\n                        message: `Username '${username}' is already in use.`,\n                    })\n                    setConfirmUsername(false)\n                })\n        }\n    }\n\n    const errorHandler = () => {\n        setError(null)\n    }\n\n    return (\n        <>\n            {!confirmUsername && <Header />}\n            {error && (\n                <ErrorModal\n                    title={error.title}\n                    message={error.message}\n                    onConfirm={errorHandler}\n                />\n            )}\n            <Router>\n                <Switch>\n                    <Route exact path='/'>\n                        <Home\n                            username={username}\n                            handleUsernameChange={handleUsernameChange}\n                            confirmUsername={confirmUsername}\n                            setConfirmUsername={setConfirmUsername}\n                            handleConfirmUsername={handleConfirmUsername}\n                            onlyUniqueUsernames={onlyUniqueUsernames}\n                            handleRoomNameChange={handleRoomNameChange}\n                            roomName={roomName}\n                        />\n                    </Route>\n                    <Route\n                        exact\n                        path='/:roomId'\n                        render={(props) => (\n                            <ChatRoomLobby\n                                {...props}\n                                username={username}\n                                handleUsernameChange={handleUsernameChange}\n                                confirmUsername={confirmUsername}\n                                handleConfirmUsername={handleConfirmUsername}\n                                handleRoomNameChangeWithLink={\n                                    handleRoomNameChangeWithLink\n                                }\n                            />\n                        )}\n                    />\n                </Switch>\n            </Router>\n        </>\n    )\n}\n\nexport default App\n","import { useState, useEffect } from 'react'\r\nimport chatServiceClient from './chatServiceClient'\r\n\r\nexport const UseChatters = (username) => {\r\n    const [usernames, setUsernames] = useState([])\r\n\r\n    useEffect(() => {\r\n        \r\n\r\n        const getUsernames = setTimeout(() => {\r\n            chatServiceClient\r\n                .getAll()\r\n                .then((chatters) => {\r\n                    setUsernames(chatters)\r\n                })\r\n                .catch((err) => {\r\n                    console.log('error with get request', err)\r\n                })\r\n        }, 500)\r\n\r\n        return () => {\r\n            clearTimeout(getUsernames)\r\n        }\r\n    }, [username])\r\n\r\n    return usernames\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}